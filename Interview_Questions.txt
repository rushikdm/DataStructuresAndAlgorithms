Interview questions

Data structures and algorithms:

1. Implement binary search algorithm by implementing following function in C++:

		int binary_search(const vector<int>& v, int num);
		
		Return the index of num in vector v. 
		Return -1 if num does not exist in vector v.
		
		What are the prerequisites for binary search? Can we do binary search in any vector?
		In how many ways binary search can be implemented? 
		Explain the space and time requirements for binary search with various approaches.
		
		Is it possible to do binary search on linked list? Explain the reason.
		In binary search, consider following statement:

		int midIndex = (startIndex + endIndex) / 2;
		
		What issue can occur with above statement? How to solve it?

		What issue did you face with binary search function from C++ 11 standard library? 

2. Consider sequence of numbers : 01211022011 etc. Only 0, 1, 2 numbers can be present in it. Write an algorithm to sort such sequence of numbers. Sorting should happen inplace i.e. the input sequence of numbers itself should be modified as the algorithm proceeds and no extra memory should be used by having another array or list. However, algorithm may use constant (one or two elements) memory. The elements may be objects associated with 0, 1, 2 integer values and may contain other data. How to sort such objects inplace as per integer values?

3. What is hash table data structure? How does it work?

4. Design data structure that retrieves elements from hashtable as per the insertion order. 

5. Consider a general tree with one root node. Each node in this tree may have zero, one, or any number of child nodes. Write an algorithm to determine top view of such a tree. Top view consists of nodes from left to right when viewed from top. 

6. What are different kinds of tree?

7. Write an algorithm to remove a node from binary search tree.

8. Write an algorithm to do level order traversal of nodes in a tree.

9. How to implement persistent data structures with undo, redo in an application?

10. Write a program to solve the following problem:
Consider a potion(recipe) with N ingredients.
The objective is to determine the proportions of all the N ingredients in the potion.
Input consists of (N-1) lines. Each line has four integer values: i, j, ai, aj
  i, j are the indices of ingredients.
  ai, aj are the relative proportionate amount of ingredients i, j respectively.
Like this (N-1) inputs are given for different pair of ingredients.

Limits
  0 <= i, j < N
  0 < ai, aj < 10
  1 < N < 200

The inputs may be invalid or are not sufficient to determine the unique solution.
In such cases, the program should report that unique solution does not exist.
Otherwise program should output the proportion values for all N ingredients.

If solution exists, the final proportion values of all the N ingredients must satisfy all the (N-1) relative proportions given in the inputs.

Sample input:

3
0 1 9 4
2 1 1 2

First line in the input (3 in this case) indicates the total number of ingredients in potion.
After the first line, (N-1) lines follow. In this case, (3-1) = 2 lines follow.
Each line that follows specifies the relative proportion of two ingredients.
Second line mentioned above specifies that the relative proportion of ingredients 0, 1 must be 9:4
Similarly, last line specifies that the relative proportion of ingredients 2, 1 must be 1:2

The answer to above problem is as follows:
(9/15)    (4/15)    (2/15)
0.6000    0.2667    0.1333

Above final proportion values satisfy all the relative proportion values mentioned in the inputs.

Solution approach : Depth First Search (DFS) traversal algorithm on the graph of ingradients.

A graph is formed with ingredients as nodes and relative proportions given in input as edges between the nodes.
Since there are N nodes and (N-1) edges, following properties can be deduced:
   - For valid inputs, it must form a single connected graph.
   - For valid inputs, it must form a tree without cycles.

If above conditions are satisfied, then, problem can be solved and it has unique solution. Otherwise, unique solution is not possible.
* Form the adjacency list graph data structure from given inputs.
* Perform DFS traversal to visit the nodes (ingredients) one by one via the edges i.e. relative proportions. Maintain the visited boolean flags to perform DFS to handle invalid input with cycles.
* While exploring the adjacent nodes, update the solution for proprtions and also by adding the new ingredient with its proportion value. 
* If the total number of nodes visited is less than N then, solution is not possible. 

11. Write a program to find the loop containing given line. 

Inputs: You are given list of lines. Each line has pair of (x,y,z) points. 
Objective: Implement the following function:
bool find_loop(vector<Line>& lines, Line line, vector<Point>& loop)

Solution approach:
 * Form adjacency list graph data structure from the given data i.e. vector<Line> lines;
 * Remove the edge for line from the graph.
 * Find the indices of vertices belonging to the line points.
 * Find the path between the vertices of line using breadth first search graph traversal algorithm.
 * Return the points for the path.

Multithreading:

1. What is multithreading?

2. Provide software implementation of mutex.

3. Consider teachers, students and transactions between teachers and students in the form of assessment. Our requirement is to store transactions in database or file or any other location. Design concurrent solution to it so that multiple transactions can happen concurrently. The number of students, teachers and number of transactions are very high and we don't want to create those many threads. How will you design such concurrent system where the number of threads needs to be restricted to some max bound? 


System design and design patterns:

1. Design the solution to implement courier pickup, delivery system. Which design pattern can be used to solve this problem?

2. Which design pattern did you use in your project? Explain the need and how it got fulfilled with design pattern?

3. Implement composite design pattern.

4. Design solution to store transactions in multiple storage types such as database, file etc. 

5. Design system for searching a ride, booking the ride. 	

C++ programming language:

1. How does explicit keyword in C++ works?

2. What is polymorphism and how it works in C++?

3. How shared_ptr is implemented in C++? How does it maintain reference count?

4. Which data structure in C++ uses hash table?

5. What is difference between map and unordered_map in C++? 

6. How lambda functions in C++ are implemented? 
   Are captured variables of lambda modifiable? 

